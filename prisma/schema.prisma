// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  settings      Json
  ownerId       Int
  Owner         User            @relation(name: "CompanyOwner", fields: [ownerId], references: [id])
  Members       User[]
  Paybill       Paybill[]
  AccessLevels  AccessLevels[]
  Ticket        Ticket[]
  Chat          Chat[]
  EphemeralUser EphemeralUser[]
}

model AccessLevels {
  id        Int     @id @default(autoincrement())
  access    Json
  userId    Int
  companyId Int
  User      User    @relation(fields: [userId], references: [id])
  Company   Company @relation(fields: [companyId], references: [id])

  @@unique([userId, companyId])
}

model EphemeralUser {
  id         Int      @id @default(autoincrement())
  user_id    String   @unique
  created_at DateTime @default(now())
  is_active  Boolean  @default(false)
  companyId  Int
  Company    Company  @relation(fields: [companyId], references: [id])
}

model Token {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  is_valid   Boolean  @default(true)
  created_at DateTime @default(now())
  is_active  Boolean  @default(false)
  detail     String?
  email      String?
  userId     Int?
  User       User?    @relation(fields: [userId], references: [id])
}

model User {
  id              Int            @id @default(autoincrement())
  email           String         @unique
  name            String?        @unique
  companyId       Int?
  is_active       Boolean        @default(false)
  user_id         String         @unique
  password        String
  created_at      DateTime       @default(now())
  Token           Token[]
  AccessLevels    AccessLevels[]
  CompaniesOwned  Company[]      @relation("CompanyOwner")
  CompaniesMember Company[]
}

model Ticket {
  id          Int          @id @default(autoincrement())
  reference   String       @unique
  info        String       @default("Default")
  urgency     String       @default("Default")
  created_at  DateTime     @default(now())
  resolved_at DateTime?
  status      String       @default("Open")
  creator     String?
  deleted     Boolean      @default(false)
  companyId   Int
  Company     Company      @relation(fields: [companyId], references: [id])
  Attachment  Attachment[]
  Chats       Chat[]
  Comments    Comment[]
}

model Comment {
  id            Int       @id @default(autoincrement())
  comment       String
  ticketId      Int
  parentId      Int?
  createdAt     DateTime  @default(now())
  commentor     String
  Parent        Comment?  @relation("ChildComments", fields: [parentId], references: [id])
  Ticket        Ticket    @relation(fields: [ticketId], references: [id])
  ChildComments Comment[] @relation("ChildComments")
}

model Chat {
  id         Int       @id @default(autoincrement())
  ticketId   Int?
  created_at DateTime  @default(now())
  chat_id    String    @unique
  Ticket     Ticket?   @relation(fields: [ticketId], references: [id])
  companyId  Int
  Company    Company   @relation(fields: [companyId], references: [id])
  Message    Message[]
  Call       Call[]
}

model Message {
  id           Int          @id @default(autoincrement())
  message      String
  created_at   DateTime     @default(now())
  opened       Boolean      @default(false)
  chatId       Int
  from_user_id String?
  to_user_id   String?
  is_call      Boolean      @default(false)
  callId       Int?
  Call         Call?        @relation(fields: [callId], references: [id])
  Attachment   Attachment[]
  Chat         Chat         @relation(fields: [chatId], references: [id])
}

model Call {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  chatId     Int
  from       String
  to         String
  duration   Float
  Chat       Chat      @relation(fields: [chatId], references: [id])
  Message    Message[]
}

model Attachment {
  id         Int         @id @default(autoincrement())
  url        String
  name       String
  created_at DateTime    @default(now())
  size       Float
  deleted    Boolean     @default(false)
  messageId  Int?
  to_purge   Boolean     @default(false)
  Message    Message?    @relation(fields: [messageId], references: [id])
  FilePurge  FilePurge[]
  Ticket     Ticket?     @relation(fields: [id], references: [id])
}

model FilePurge {
  id           Int        @id @default(autoincrement())
  attachmentId Int        @unique
  deadline     DateTime
  Attachment   Attachment @relation(fields: [attachmentId], references: [id])
}

model Paybill {
  id        Int     @id @default(autoincrement())
  number    Int
  companyId Int
  Company   Company @relation(fields: [companyId], references: [id])
}

model Notification {
  id          Int      @id @default(autoincrement())
  type        String
  message     String
  created_at  DateTime @default(now())
  opened      Boolean  @default(false)
  for_user_id String?
}
